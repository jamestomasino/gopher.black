i----------------------------------------	
iUsing ptx to generate one-time pads	
iMarch 15th, 2018	
i----------------------------------------	
i	
iI have been working my way through coreutils [0] recently when	
iI came across ptx. 	
i	
i  $ apropos ptx	
i	
i  ptx (1) - produce a permuted index of file contents	
i	
iWhat the hell does that mean? I know...	
i	
i  $ man ptx	
i	
i  PTX(1)                User Commands                  PTX(1)	
i	
i  NAME	
i   ptx - produce a permuted index of file contents	
i	
i  SYNOPSIS	
i   ptx [OPTION]... [INPUT]...   (without -G)	
i   ptx -G [OPTION]... [INPUT [OUTPUT]]	
i	
i  DESCRIPTION	
i   Output a permuted index, including context, of the words	
i   in the input files.	
i	
i   With no FILE, or when FILE is -, read standard input.	
i	
i   Mandatory arguments to long options are mandatory for	
i   short options too.	
i	
i   ...	
i	
iOh that totally clears it... nope. Still no clue.	
i	
iSo I asked on Mastodon and a few people had some suggestions in	
iparticular someone was able to shoot me over to a blog post [1]	
iwhich tries to clear up what a 'purmuted index' even is. And	
ithat's the key. So check this out: 	
i	
iA while back before we had badass search engines and hyperlinked	
idoom shenanigans manually finding the reference to a word in	
ia document SUUUUUUUUCKED. So they made this index in the back that	
ilisted all the key terms alphebetically in the middle column of	
ia page. To the left of that word it would list whatever sentence	
iled up to it. To the right they'd list the sentence fragment that	
ifollowed the term. Finally, the page number. With that you could	
ijump to the page and eye-ball search it yourself.	
i	
iIt's been around since systemV and it's pretty much useless,	
iright? Well, foxy, I think I came up with a fun hobby use-case.	
i	
iPick a book with a publically available canonical plain-text	
isource. Oh, I dunno, head over to Project Gutenburg [2] or	
isomething and wrestle yourself up some Joyce (or ILLEGAL GERMAN	
iNOVELS!!!!! [3]). We're gonna shove that badboy into ptx like	
ia champ. Here we go...	
i	
i  $ curl https://www.gutenberg.org/files/4300/4300-0.txt > ulysses.txt	
i  $ ptx ulysses.txt	
i	
i  SCREEN EXPLODES WITH TEXT FOR SEVERAL MINUTES!!!!!	
i	
iThat's not how that works. Back to manpage!	
i	
i          Hmmm...	
i              ...assumes latin-1 charset...	
i          ...ignore case, perhaps...	
i               ...[.?!][]\"')}]*\\($\\|\t\\|  \\)[ \t\n]*...	
i          ...Emacs next-error, grumble...	
i               ...-w, width, ahha...	
i                  	
i                ROFF! NO FUCKING WAY!	
i	
iOne of the output formats for ptx is freaking roff! Syncronicity,	
ibaby! [4] Lets try something a little smaller.	
i	
i  $ curl http://www.gutenberg.org/cache/epub/1065/pg1065.txt > theraven.txt	
i  $ ptx -O -f -w 66 theraven.txt > theraven-index.txt	
i	
iThat sorta works. Ugh, but I'm getitng tired. Here's the plan for	
iwhat's next:	
i	
i  - Figure out how to format this stuff so I can awk it	
i  - awk so that the text key and one more word to the right are	
i    the output. Two words with a space between, that's it.	
i  - sort unique that bad-boy by each column in turn so both pairs	
i    of words are unique.	
i  - Use whatever words are in your primary list to write a plain	
i    text message. If your source document is large enough that's	
i    virtually any word you'd like to use.	
i  - Use awk to replace your words with the one to the right via	
i    a lookup file	
i  - Send secret message to a friend. The knowledge of which book	
i    is your cypher is all that's necessary to repeat the process	
i    in reverse.	
i	
iHuzzah for secret codes.	
i	
iIf I get some time this weekend I'll look at writing a script to	
iautomate this for you. Provide a book and a message and indicate	
iwhether to encode or decode. Oh what fun that would be for some	
iprivate crypto. Thinking you could do this in perl? Wanna show me	
iup? Put your illogical collection of special characters where your	
imouth is, buddy!	
i	
0[0] GNU Core Utilities	/GNU Core Utilities	gopherpedia.com	70
h[1] Reading a Permuted Index	URL:http://blog.corvus.net/2012/01/reading-permuted-index-permuted-index.html
1[2] Project Gutenberg on Gopher	/	dante.pglaf.org	70
h[3] Project Gutenberg Blocks Access to Germany	URL:http://www.techdirt.com/articles/20180306/03423339363/project-gutenberg-blocks-access-germany-to-all-public-domain-books-because-local-copyright-claim-18-them.shtml
0[4] dbucklin - Formatting for Gopher with GNU troff	/users/dbucklin/posts/gopher_groff.txt	sdf.org	70
