i----------------------------------------	
iCLI Tricks: todo	
iMarch 22nd, 2018	
i----------------------------------------	
i	
iThis is part of a series of phlog entries where I will share some	
iof my command line tricks, tips, and scripts.	
i	
i	
i## todo ##	
i	
iEveryone has a to-do app they love. Many of us have rolled our	
iown. This is mine.	
i	
iIt's another bash function that's auto sourced by my	
i.bash_profile, offers bash-completion, and has a built in	
iarchiver.	
i	
i	
i### The Idea ###	
i	
iI organize my daily life in tmux by using sessions. I'm currently	
iin a session named "personal". I also have "work" and "writing"	
iand "music" and others. My goals for my to-do list manager are:	
i	
i  - Super simple cli interface	
i  - Sync data between machines (again, cheating with dropbox here)	
i  - Contextual to-do list based on tmux session with fallback	
i  - Add items	
i  - Remove items by number or regex (good for groups of tasks)	
i  - Archive things I remove and add a timestamp (good for	
i    timesheets)	
i  - A little help is nice	
i  - Bash-completion all the things	
i	
i	
i### How to use it ###	
i	
i  $ todo -a "Some task"	
i	
i  > 1 - Some task	
i	
i  $ todo -a Another task	
i	
i  > 1 - Some task	
i  > 2 - Another task	
i	
i  $ todo -d 1	
i	
i  > 2 - Another task	
i	
iSimple, right? You don't need to quote the todo item unless you're	
iusing special characters. You can pass the -d flag a number to	
iremove that item, or a string and it'll do a regex match.	
i	
iNeed more help on how to use it? Type:	
i	
i  $ todo --help	
i	
i	
i### Requirements ###	
i	
iAn environment variable called "$TODOFILE" is required that points	
ito a specific text document where you want your to-do list saved.	
iIf you are in a tmux session, todo will use the directory of your	
i$TODOFILE but rename the txt file to match your session name.	
iArchives are saved in a file called XXXX.archive.txt where XXXX is	
iyour TODOFILE or session name.	
i	
iIt probably requires GNU sed as well, but I haven't checked.	
i	
i	
i### The Source ###	
i	
iYou can find the latest source here: [0].	
h[0] tomasino's dotfiles - todo function	URL:http://github.com/jamestomasino/dotfiles/blob/master/bash/.functions/todo
i	
i  #!/usr/bin/env bash	
i	
i  # Todo List & Completion	
i  _todo() {	
i    local iter use cur	
i    cur=${COMP_WORDS[COMP_CWORD]}	
i    use=$( awk '{gsub(/ /,"\\ ")}8' "$TODOFILE" )	
i    use="${use//\\ /___}"	
i    for iter in $use; do	
i      if [[ $iter =~ ^$cur ]]; then	
i        COMPREPLY+=( "${iter//___/ }" )	
i      fi	
i    done	
i  }	
i  todo() {	
i    : "${TODO:?'TODO ENV Var not set. Please set to path of default todo file.'}"	
i    # If we are in a tmux session, name the file with the session name	
i    # If not in tmux, use the full $TODO env var for path/file	
i    if echo "$TERM" | grep -Fq screen && test "$TMUX" ; then	
i      sessname=$(tmux display -p '#S')	
i      todopath=$(dirname "$TODO")	
i      TODOFILE=$todopath/$sessname".txt"	
i      TODOARCHIVEFILE=$todopath/$sessname".archive.txt"	
i    else	
i      TODOFILE=$TODO	
i      TODOARCHIVEFILE=${TODO%.*}.archive.txt	
i    fi	
i    if [ $# -eq 0 ]; then	
i      if [ -f "$TODOFILE" ] ; then	
i        awk '{ print NR, "-", $0 }' "$TODOFILE" 	
i      fi	
i    else	
i      case "$1" in	
i        -h|--help)	
i          echo "todo - Command Line Todo List Manager"	
i          echo " "	
i          echo "Creates a text-based todo list and provides basic operations to add and remove elements from the list. If using TMUX, the todo list is session based, using the name of your active session."	
i          echo " "	
i          echo "usage: todo                                 # display todo list"	
i          echo "usage: todo (--help or -h)                  # show this help"	
i          echo "usage: todo (--add or -a) [activity name]   # add a new activity to list"	
i          echo "usage: todo (--archive)                     # show completed tasks in archive list"	
i          echo "usage: todo (--done or -d) [name or #]      # complete and archive activity"	
i          ;;	
i        -a|--add)	
i          echo "${*:2}" >> "$TODOFILE"	
i          ;;	
i        --archive)	
i          if [ -f "$TODOARCHIVEFILE" ] ; then	
i            cat "$TODOARCHIVEFILE"	
i          fi	
i          ;;	
i        -d|--done)	
i          re='^[0-9]+$'	
i          if ! [[ "$2" =~ $re ]] ; then	
i            match=$(sed -n "/$2/p" "$TODOFILE" 2> /dev/null)	
i            sed -i "" -e "/$2/d" "$TODOFILE" 2> /dev/null	
i          else	
i            match=$(sed -n "$2p" "$TODOFILE" 2> /dev/null)	
i            sed -i "" -e "$2d" "$TODOFILE" 2> /dev/null	
i          fi	
i          if [ ! -z "$match" ]; then	
i            echo "$(date +"%Y-%m-%d %H:%M:%S") - $match" >> "$TODOARCHIVEFILE"	
i          fi	
i          ;;	
i      esac	
i    fi	
i  }	
i  complete -F _todo todo	
