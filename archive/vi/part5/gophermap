iThe vi/ex Editor, Part 5: Take Control of Your Editing Environment

i  The set Command
i  set Command Variables that Control How to Paint the Screen
i  Playing "tag"
i  Making Your Environment Setup Automatic
i  The Next Installment


iBesides all the power in the Vi/Ex editor, there's a lot of
iflexibility in it, too.  You've already met some of this
iadaptability when I pointed out various ways to perform many
iediting functions.  Now it's time to meet phase two of editor
iflexibility -- the myriad ways to modify the editor's internal
ioperations.

iThere's no "setup mode" for changing these parameters.  Instead,
iall the changes are made with line-mode commands, which can be
iinterspersed with ordinary editing commands.  That is, you give
ithe commands from the prompt, as usual, if you are editing in line
imode.  When you are editing in visual (or screen) mode, precede
ithese environment-modifying commands with a colon, as you would
iwith any other line-mode commands you specify in visual mode.

iThese modifications take effect as soon as you give the commands.
iThey stay in effect as long as you run the editor program.  You
ican switch from editing one file to another -- as with any of the
iedit, next, rewind commands -- without affecting the editing
ienvironment you've set up.  And, you can revoke or further modify
iany environmental changes you've made at any time, by using the
isame commands or variant forms of them.

iYour environment setup does go away when you quit the editor
ialtogether.  The next time you invoke the editor you'll find that
iall the environment parameters have returned to their default
ivalues. (This can be a blessing in disguise, because there is no
idirect way to tell the editor to restore all parameters to default
isettings.)

iWhen you've found a combination of settings you'd like to use
iagain, there are ways to have these settings established
iautomatically (or semi-automatically) whenever you invoke the
ieditor.  You can even have several of these preset environments --
iwhich one is used will depend on the circumstances in which you
iinvoke the editor.  I'll explain how to automate the settings at
ithe end of this tutorial.


iThe set Command

iMost of your setup will be accomplished by a single command that
icontrols around fifty editor variables that affect the editing
ienvironment.  The set command, for which se is the shortest
iabbreviation, sets variables having three different types of
ivalues: string, numeric, and boolean.  Consider the examples here:

i  set report=7
i  set term=vt100
i  set terse
i  set nomagic

iBecause the first two examples are assignments, they must specify
ieither string or numeric values.  The first is numeric; here,
ireport=7 tells the editor to give you a report (warning message)
iwhenever a command changes seven or more lines -- the default is
ifive or more lines.

iThe second example assigns a string value; the numerals in it are
iregarded as merely characters by the editor.  The term=vt100
idirective tells the editor to address your terminal as though it
iwere a DEC model VT100.  (You specify one of the listed short
inames for the terminal -- obtained from the Termcap or Terminfo
iterminal-description systems -- as its string value.)  The default
ifor this variable is to use the terminal type from your log-in
ishell environment (the value assigned to your TERM variable), if
iavailable -- and if not available, then address your terminal as
ithough it were a "dumb" terminal.

iThe last two examples (without equal signs) illustrate boolean
ivariables, which can be either on (enabled) or off (disabled). You
iturn a boolean variable on just by giving its name after the set
icommand.  The first of these two boolean examples tells the editor
ito make any error messages very brief: cryptic to inexperienced
iusers, but convenient for people who are quite familiar with the
ieditor.  The default for this variable is "off" or "disabled",
iwhich provides longer, more explanatory error messages.

iTo turn a boolean variable off, just give its name prefixed by the
istring "no" without any intervening space characters.  The last of
ithese examples turns off the special ("magic") interpretation of
iseveral metacharacters, as discussed in an earlier part of this
itutorial dealing with search patterns. The usual default for this
ivariable's value is "magic", which means all metacharacters have
itheir special interpretation -- but if you invoke the editor by
ithe name edit or vedit, then "nomagic" is the default value (no
ispecial interpretation of these particular metacharacters).

iThere's no need to use several distinct set commands when you want
ito change a number of these variables.  A single command can have
ialmost any number of arguments.  So all four of the example
icommands above could be replaced by this single command:

i  set report=7 term=vt100 terse nomagic

iVariant forms of this command will tell you the present status of
iindividual variables, all that have been changed, or all the
ivariables. For instance, type "set" without any arguments to tell
ithe editor to display a list of all the variables that have been
ichanged from their default values, along with their current
ivalues.

iType "set all" to display all the variables and their values,
iwhether changed from default or not.  This is a good way to check
iwhich variables your version of the editor recognizes, and what
itheir default values actually are -- some proprietary versions of
ithe editor have played with both these factors.

iIf you want to check the values of only one or a few variables,
iyou don't have to scan through a long list -- you can run a set
icommand that will report the settings of only the variables you
ispecify.  For a boolean variable, just give the name of the
ivariable, immediately followed by a question mark, as an argument
ito the command.  For a string- or numeric-valued variable, you
ionly need to specify the name itself, without the equal sign.
iThus, typing:

i  set report magic?

iwill produce a response like this:

i  report=7 nomagic

iIf the details of checking individual variables seem too arcane to
iremember, the editor will cut you some slack: You may specify the
iname of a boolean variable in its "no" form, and you may give a
inon-boolean variable with an unneeded question mark at the end of
iit, and your query will still work.  So typing:

i  set report? nomagic?

iwill produce the same result as the previous query did.

iYou can even mix option settings with inquiries in the same set
icommand, in any order.  For example, if you want to turn on number
iand set report to warn you whenever even three lines are changed,
iand also want to know what terminal type the editor thinks you are
iusing and whether terse is on or off, any one of the following
icommand lines will take care of it all:

i  set number report=3 term terse?
i  set term terse? number report=3
i  set term number terse? report=3

iBelow, I've listed some important editor variables that modify the
ivisual display, with an explanation of each.  If two names are
ispecified, the first is the full name and the other is the
ishortest recognized abbreviation.  The full name will appear in
ithe lists displayed when you type "set" by itself or type "set
iall".


iset Command Variables that Control How to Paint the Screen

i  number nu

iYou already know that the editor assigns a number to every line in
iyour file, and changes line numbers every time you add or delete
ilines, in order to keep the numbers consecutive.  The number
iboolean variable tells the editor to display those line numbers
inext to every file line that appears on the screen, in both screen
iand line-editing modes. You just have to turn it on; it's off by
idefault.  If you have a window that looks like this:

i  COLOR CODING FOR POWER WIRES
i  green     ground
i  white     neutral
i  black     hot
i  red       hot

iturning on this variable will make it look something like this:

i  158  COLOR CODING FOR POWER WIRES
i  159  green     ground
i  160  white     neutral
i  161  black     hot
i  162  red       hot

iThe displayed numbers do not become part of the file, and nothing
iyou can do, deliberate or accidental, will cause your editing to
iinteract with the line numbers.

i  list

iTurning on this off-by-default variable makes two changes in the
iway file lines are displayed on the screen, whether in line- or
iscreen-editing mode:

iThe end of each line is marked by a dollar sign.  (This applies to
iactual line ends, not to places where the editor wraps a long line
iso it can all be displayed on the screen.)

iEvery tab character is replaced by a circumflex-capital-I ("^I")
icharacter sequence.  (This means that columns that were kept in
ialignment by preceding tabs will not be displayed aligned with
ithis variable enabled.)

iTaking the same sample screen as in the previous example, when the
ilist variable is on, the screen would look like this:

i  COLOR CODING FOR POWER WIRES$
i  green^Iground$
i  white^Ineutral$
i  black^Ihot$
i  red^Ihot$

iThis variable affects display only, the contents of the file are
inot changed in any way.  The list and number variables are
icompatible. Enabling them both would produce a display like this:

i  158  COLOR CODING FOR POWER WIRES$
i  159  green^Iground$
i  160  white^Ineutral$
i  161  black^Ihot$
i  162  red^Ihot$

i  window=

iThe numeric value of this variable tells the editor how many
iscreen lines should be in the editing window (in screen-editing
imode). The default is one less than the size of your screen or
iwindow. This variable's value cannot be changed while you are in
iscreen-editing mode.

i  scroll

iA numeric variable that sets the number of lines to be scrolled
idown by a control-D or up by a control-U command.  The z command
iuses twice this count as the number of lines to display.  Default
ivalue is half the size of the screen or window.

iYou can give a count prior to one of those scrolling commands,
iwhich will override the value of the scroll variable.  For
iexample, typing "3control-D" will scroll forward just three lines.

iCaution:  The editor will remember any count you give, and use
ithat count -- instead of the value assigned to scroll -- with any
ifuture command you give without specifying a new count. Because
ithe value of the scroll variable remains unchanged, even though it
iis no longer being used, the set command has no way to undo this
inew behavior.  The only way to go back to using the value set for
iscroll is to look up that value -- type "set scroll" -- then use
ithis value as a count preceding another of the commands that
inormally use the scroll variable.


iPlaying " tag"

iIf your editing work requires jumping from place to place in
inumerous files, it would be convenient to index the places you
ivisit most. The editor has a system for handling this.  It's
ipretty simple, too; you set up one or more reference lists, then
iyou can go to the place within the file that you want just by
ityping a few characters.

iCaution:  the "tags" system described below does not simply switch
ifocus briefly to another file.  It ends your editing of the
icurrent file, then loads the new file into the editor with the
istandard context changes, just as if you had given an edit
icommand.  As a consequence of this, the editor will normally
irefuse to execute a tag command when the file you are presently
iediting has changes which you have not yet written to permanent
istorage.  If you choose to override this protection, give the
icommand as tag! or ta!.

iTo use this system, you need to set up at least one "tags" file
icontaining references to your file destinations.  If programming
iis your work and you use C, C++, Pascal, FORTRAN, lex or yacc, the
iUnix <a href="/unixworld/man/ctags.1">ctags utility can set up a
isuitable "tags" file for you.  If not, it isn't all that difficult
ito build such a file yourself.

iEach line in a "tags" file is a complete reference to a place you
imight want to go.  The line has five parts, which (reading from
ileft to right) are:

iThe short name you will use to refer to the particular file and
ithe place in it.  Don't start choosing names, though, until you've
iread the third way to invoke a tag, below.

iOne tab character, as a separator.  A space character will not do
ihere.

iThe name of the destination file.  This can be a simple name, if
ithe file is in your current directory, or a path name, if not.

iAnother tab character.  Again, a space character won't do.

iA line-mode search command that will find the place you want
iwithin the file.  As you may have cleverly deduced, you can string
imultiple commands together here with the vertical-bar ("|")
icharacter, and can use editing commands if you want the file
ipre-edited.  Spaces and even tabs may appear in this string if
ineeded; only the first two tabs in a line are interpreted as field
iseparators.

iIf this file structure sounds a little complex, look at this short
iexample of a "tags" file to see how things actually work out:

i  difid   ../math/calc    /^APPENDIX/;/^C. Differen
i  integ   ../math/calc    /^APPENDIX/;/^D. Integrals
i  log     /adm/err-log    1;?Err-7$
i  rvlog   /adm/err-log    g/^/m0|0;/Err-7$
i  vocab   %      /^GLOSSARY
i  words   %      /^GLOSSARY

iThe first line in the example above provides that using "difid" as
ia tag will take the user to edit a file named "calc", in a
idirectory with relative path name "../math". (Note: that using
ithis tag will not change the current directory of the user's
ishell; only the file being edited is changed.)  Once that file has
ibeen loaded, the editor will seek out the first line that starts
iwith "APPENDIX", and go from there to the next line that begins
iwith "C. Differen".

iYes, you can specify different tags to enter the same file at
idifferent points.  My second example line contains a tag that
ileads to a different place in the same file.  After the editor has
isearched out the first line beginning "APPENDIX", as before, it
igoes on to a different section of the appendix.

iYou can even use multiple tags to enter the file at the same
ipoint, but with different preliminary editing.  My "log" and
i"rvlog" tags go to the same file and the same line -- the most
irecently appended line that ends with "Err-7".  The difference is
ithat the "rvlog" tag first reverses the order of lines in the
ifile.  (Note that the search command for the two tags is
idifferent, because in the second case the line being sought has
ibeen moved to a different position in the file.)

iAnd you can use a tag to move to a place in the file you are
ialready editing.  In the last two example lines I have used the
ipercent sign (%) to indicate "current file"; the pound-sign (#)
ifor "alternate file" is also acceptable.  These tags move the user
ito the glossary section of the document currently being edited,
iwhatever that document may be.  If I were to invoke a tag with an
iactual file name in it, and that file happened to be the file I
iwas presently editing, the effect would be the same.

iFinally, you undoubtedly saw that the last two entries in my tags
ifile are identical except for the tag names.  Either tag will take
iyou to the same place in the same file with no preliminary
iediting. This is legitimate, and often useful.  You may be
ibuilding a tag file for multiple users -- some of these users are
iaccustomed to a certain tag name for a given file and location,
isome to another tag name. The tags system allows you to
iaccommodate both groups.

iYou may have noticed that the lines in my example file are
iarranged in ASCII-sort order.  This is necessary to keep the
itag-search mechanism from missing the tag you specify.  If you
idon't trust your own ability to sort the lines, the Unix sort
iutility can do it for you.

iWhen you've built your "tags" file, you need a place to put it.
iOrdinarily, when you invoke a tag name, the editor first tries to
ilook it up in a file named "tags" in your current directory. If it
ifails to find such a file, it then looks for /usr/lib/tags .  But
iyou can override these defaults by setting a different value for
ithe "tags" file in your editing environment.  For instance, if you
iinclude this command in your setup file:

i  set tags=moretags

ithen tag searches will take place in a file named "moretags" in
iyour current directory.

iWith everything set up, you only need to know how to invoke a tag
ias needed.  There are three or four ways to do it, all enumerated
ibelow:

iWhen you invoke the editor from your shell's command line you can
iuse the "-t" command-line option flag to specify a tagged item
iinstead of naming a file to edit.  For example, typing the line
i(from your shell prompt):

i  vi -t chap3

itells the editor to look up the "chap3" tag to find the
idestination file and location in that file.  Oddly enough, you can
ilist some file names to edit as well as a tag (with "-t") on the
ieditor-invocation command line.  The rule is that the first string
iof non-whitespace characters immediately following the "-t" flag
iis regarded by the editor as a tag name; any other such strings
ithat don't begin with a "-" character are taken as actual names of
ifiles.  However, the tagged and the named files aren't remembered
ithe same way in this case.

iFor instance, if you specify a tag, then two file names, the
ieditor will initially place you in the tagged file and when you
itype :next you will move to the first named file, and another :n
i(the shortest abbreviation) takes you to the second named file.
iBut, the tagged file does not appear on the argument list --
iviewed with the args command -- so when you enter a :rewind
icommand you return to the first named file, not the tagged file,
ieven though it was specified first on the command line.

iWhile you are editing a file, you can invoke a tag with the
iline-mode command tag (shortest abbreviation, ta) followed by a
ispace and the tag name.  This command can be given from screen
imode as :tag, of course.

iWhile you are in screen mode, you can put the cursor on either the
ifirst letter of a word or the space immediately preceding it and
ithen type a "control-]" character.  This has the same effect as if
iyou'd typed the word the cursor is at as the argument to a :tag
icommand.

iCaution:  A "control-]" is the default Telnet "escape" character.
iSo if you are editing on a remote system during a Telnet session
iand enter a "control-]", control will return to Telnet, which will
iinterpret what you type next as a Telnet command.  You could
ichange the Telnet escape character when you start your remote
iterminal session in order to use "control-]" with the editor.

iSome newer versions of the editor maintain a stack of tags.  If
iso, you can repeat the last :tag command you gave in screen mode
iby typing "control-T". This can take a count, so that typing a "2"
iand then a "control-T" repeats the :tag command preceding the last
ione you gave, etcetera.


iMaking Your Environment Setup Automatic

iWhen you've worked out an editing environment setup that you will
iwant to use frequently, or even occasionally, there is no need to
itype in all the changes from default every time you start up the
ieditor. Because these are all line-mode editor commands, there are
iseveral ways to define them automatically, all or some of the
itime.

iIf there is an editor start-up file (which must be named .exrc) in
iyour home directory (the dot at the start of the name is essential
iand the "rc" abbreviation means "run command"), the editor will
iinterpret it every time you invoke the editor and execute (or at
ileast attempt to execute) the lines in the file as line-mode
icommands before it turns editing control over to you.  This
iapplies to environment-setting commands as well as others, so
iplacing your set-up commands somewhere in this file will cause the
isetup to happen every time you invoke the editor.

iThere are drawbacks to this approach, though.  You can only have
ione environment preset this way: the editor will use that same
ienvironment every time you invoke the editor.  One way to provide
imore flexibility is to maintain several files with various setups
iin them, and before you enter the editor, rename the appropriate
ione of those start-up files to .exrc and when you leave the
ieditor, restore its original name.  But you shouldn't have to deal
iwith anything this cumbersome just to control your editing
ienvironment.

iThe creators of the editor have provided a much better solution.
iBefore the editor looks in your home directory for a start-up
ifile, it first looks in the directory from which you invoked the
ieditor. If it finds a file named .exrc there, it interprets that
ias the start-up file instead of the .exrc file in your home
idirectory.

iThat behavior lets you have a special setup for each directory in
iwhich you might want to do some editing.  For instance, let's say
iyou have a directory of shell scripts, another containing chapters
ifrom a book you're writing, still another you use for writing
ie-mail, plus one where you store and edit error logs -- you can
ihave a separate editing environment for each of these purposes.
iAnd if you invoke the editor from a directory where you don't
imaintain a separate start-up file, the one in your home directory
iwill be used.  Just remember to change to the directory where the
itarget file(s) are located before invoking the editor.

iCaution:  If you invoke the editor from a directory different from
ithe one containing the file you're editing, the editor will
iinterpret the start-up file from your start-up directory, and not
iuse the intended environment (defined by the .exrc file in the
idirectory where the target file resides).

iOne caveat about multiple .exrc files, though.  In Unix System V
iand its successors, a security feature restricts the editor's
iaccess to .exrc files that are not in your home directory. The
ieditor will not interpret a .exrc file that's not in your home
idirectory, unless you also have a .exrc file that does live in
iyour home directory, and that file contains a line that sets the
iexrc boolean variable.

iThe security hazard that this complex proviso guards against is a
ireal one.  Let's say you need to edit several files that are in a
idirectory like /tmp, /var/tmp or some other directory that is
iwritable by all users.  To save the trouble of providing a full
ipath name every time you want want to switch from one file to
ianother, you could easily change directories (that is, "cd" to the
idirectory where these files are located). But when you want to
istart editing a file, the Vi/Ex editor may find a Trojan horse
ifile named .exrc placed in your current directory by a cracker to
iawait victims.  Of course, the commands in this false editor
istart-up file will be run with your account ownership.  These
icommands aren't limited to editor set-up commands, but may be any
ishell command that you're allowed to run, including ones to wipe
iout your files, reset file permissions to allow public access to
iconfidential data, send indelicate comments to your boss using
iutilities like write combined with banner, and so forth.

iNow, perhaps you work on files that have different kinds of
imaterial in different sections, and you want to be able to make a
icomplete change of editing environment whenever you move from one
isection to another. In this case, use the source command, with so
ias its shortest abbreviation.

iThe source line-mode command can be given at any time, although
iyou may have to give it from line-editing mode, not from screen
imode with a preceding colon.  It takes one argument, a file name
ior path name, and its function is to read the named set-up file
iand attempt to execute the lines in it as a series of line-mode
icommands.

iWhether or not you can specify this command successfully in screen
imode depends on the editor version you are using.  Some early
iversions were quite serious about prohibiting multiple-line
iline-mode commands while in screen mode.  So serious that these
iversions will execute only the first line of a script that has
ibeen sourced in while the user is in screen mode.  If you don't
iencounter this behavior, you can ignore this warning.  If you do,
iyou at least know where the problem lies.

iNow that you understand editor start-up files, I can acknowledge
ithat the one you put in you home directory is not strictly
inecessary. The editor will accept the value of a shell environment
ivariable named EXINIT as the string of line-mode commands to be
irun whenever the editor starts up.  But I don't recommend going
ithis route, for several reasons:

iUsually the shell has a strict limit on the number of characters
ifor the value of an environment variable, whereas the size of a
i.exrc file is practically unlimited.  As you get better at using
ithe editor, you can easily develop a home-directory start-up file
ithat is too large for EXINIT.

iA start-up file can be changed by simple editing, but you have to
iredefine the EXINIT variable from scratch.

iA change in your start-up file takes effect the next time you
iinvoke the editor, whereas if your EXINIT variable is defined in a
ishell start-up file, it's new definition won't take effect until
iyou log-in again or explicitly "source" the shell start-up file
ifrom the shell's command line.

iWhen you want to restore the editor's environment variables to
itheir beginning state, you can simply source in the editor
istart-up file. There's no way to do this with the EXINIT shell
ivariable.

iYou can use source to execute an editor set-up file from anywhere
iin your file space.  It will also execute any file of line-mode
icommands, no matter what the file name.  For example, let's say
iyou have a special environment setup that you never use at the
ibeginning of an editing job, but you do need it to edit tables.
iYou invoke the editor as always, but when you're ready to edit
iyour tables, you run a command like:

i  :so table-defs

iwhere the table-defs file contains line-mode commands that set up
ithe editor for table editing.

iWhen you specify a file of line-mode editing commands with source
ito perform, say, a frequently used edit automatically, it's
iprobably a good idea to have commands in that file to return the
iediting environment to what it was before the editing commands
iwere run, assuming the environment was changed for the editing
itask.

iCaution:  If you decide to use environment set-up files that you
ispecify while you are editing -- you can't always depend on
idefault values.  For example, the autoindent variable is disabled
i("off") by default.  So if you are setting up a start-up file that
iwill only be used at the beginning of editor sessions, and you
idon't want to use autoindenting, you don't need to do anything to
ileave it turned off.  But if you plan to occasionally use that
iset-up file in the middle of a session, you have to ask yourself,
i"Will I ever use this setup in a case where I previously had
iautoindenting turned on, either by another set-up file or because
iI manually turned it on?" If the answer that question is "Yes",
ithen the set-up file you're writing must contain a set noai
icommand to be sure that autoindentation is definitely disabled.

iAnd, what if the source command is broken in your version of the
ieditor?  There is still a way to make semiautomatic environment
ichanges.  You have to use the line-mode read command plus a
ilittle-known feature of letter-named storage buffers.

iYou're probably accustomed to using the "a" through "z" named
ibuffers for storing pieces of text, and returning these pieces to
ithe main document with commands like "jp, which returns the
icontents of the "j" buffer right after the cursor position in
ivisual mode.  Well, you can also use a visual-mode command of the
iform @j, which takes the text from the "j" buffer and executes it
ias a visual-mode command string. For instance, if buffer "j"
icontains "257G3dd" as its text, then typing @j will move the
icursor to line 257 and delete that line and the two that follow
iit.

iThe text in the buffer must be commands you could give from visual
imode for this feature to work, but that includes line-mode
icommands that are preceded by a colon and terminated with a
icarriage-return character. So if buffer "h" contains the lines:

i  :se nomesg terse list
i  :map v :!wc -w %^M
i  1G

ithen typing "@h" will reset three variables, map a command string,
iand move the cursor to the first line in the file.

iThere are a few points you should keep well in mind when you are
iplacing line-mode commands into a letter-named buffer for future
iexecution.  All of them revolve around the fact that the editor is
iexpecting screen-mode commands from this source.

iA line-mode command must begin with a colon character.

iA line-mode command may begin at the start of a line of text or in
ithe middle of it, but it must end at the end of the line.  At
iexecution time, the newline character at the end of the text line
iis what tells the editor that this particular command is ended and
ia new command (either line- or screen-mode) will follow.

iNever put a line break in buffer text you will execute as a
icommand string unless a carriage return is part of the command
istring at that point.

iTo import this set-up command list from an outside file to the "h"
ibuffer, use the read command.  For example, if your three-line
iset-up file is named set.5, then type:

i  :r set.5
i  "h3dd@h

ito read the file into your editing buffer, then the "h3dd@h
icommand will delete those three lines -- which came from the
iexternal file -- into the "h" named buffer, then execute the same
ilines as set-up commands.

iThe Next Installment

iYou asked for it, and it's here! Most of the e-mail I receive
iabout this tutorial asks me how to do some specific kind of
iediting with Vi.  The most popular request so far has been for
itechniques to edit material in columns, and that's what I explain
iin the next installment. Then it's on to the treacherous, albeit
iimportant, topic of addresses for screen-mode commands.

1Part 6: Addresses and Columns	/archive/vi/part6/
1Back to the index	/archive/vi/


