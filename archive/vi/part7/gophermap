iThe vi/ex Editor, Part 7: A Little "R" and "r": The Fine Points	
iof those Replacement Commands	
i	
i  There's more to R than to r	
i  Quoting in Characters	
i  Readers Ask	
i	
iTommy Spratlin & Thai-Nghia Dinh writes:	
i	
iNext Time Around	
i	
iThis installment of our Vi/Ex tutorial series is a diversion from	
ithe subjects I promised at the end of the previous part -- the	
ichange is my fault, and yet it is necessary.  When I blithely	
isuggested last time that the R command is just like the familiar r	
icommand, except for a few differences I mentioned, I was leading	
iyou astray.  	
i	
iThere are several differences that can cause problems in certain	
iuses unless you understand those differences.  And you won't really	
icomprehend the greatest of those differences until you know about	
imetacharacters in insert mode.  But as an encouragement to follow	
iall this, consider that almost all of what I say here about the R	
icommand also is valid with all the other commands that put you into	
itext insertion mode:	
i	
i    a A i I o O c s :a :i etcetera.	
i	
iThere's more to R than to r	
i	
iThe r command replaces whatever character is presently under the	
icursor, so there must be some character under the cursor for it to	
ireplace -- otherwise it just gives you an error beep.  Not so with	
iR.	
i	
iYou can give the R command  on an empty line; whatever you type	
iafter that, up to the next escape character, will take the place of	
ithat empty line just as though you had typed past the end of an	
iexisting line after giving an R command.  (I was going to say	
i"just as though you had given an a command", but I'm now very	
ileary of making comparisons that are incomplete without paragraphs	
iof explanations.)  You can even start entering text into a	
ibrand-new file via the R command.  	
i	
iThe factor above can be useful in various situations; I only have	
ispace to mention one.  At times I want to type new characters to	
ireplace blank spaces in a place where some of the lines are empty.	
iThese do not have any blanks; no characters at all.  But I do not	
ihave to look at each line before I start typing on it, to see	
iwhether I should use an R or an a command, because R will work in	
ieither case.  	
i	
iThe R command is more forgiving of your typing errors, too.	
iWhatever character you type after an r is final. If you	
iaccidentally typed the wrong character, you can only put back what	
iwas there by typing a u command, if the mistake was the last	
iediting command you typed, or put in the replacement you had in	
imind by returning the cursor to the spot and running another, more	
icareful, r command.  	
i	
iBut if you mistype during an R command, you can backspace over the	
ierror with the backspace key.  Then you can type in the character	
i(or characters; you can back up multiple spaces by repeating the	
ibackspace key) you should have typed.  And if you simply typed too	
ifar, you'll be glad to know that backspacing doesn't just remove	
ithe incorrect characters, it restores the characters that were	
ithere, either right away or as soon as you hit the escape key.  You	
ican even backspace over everything you've typed during this R	
icommand before you type escape, because the editor does not object	
ito a replacement string length of zero.  	
i	
iOne caveat here, though, lest my clarification turn out to need a	
iclarification of its own.  With either of these commands it is	
ipossible to break a line, just by typing the return key as a	
ireplacement character, and with the R command this linebreaking can	
ibe done either while actually replacing characters or when typing	
ion beyond the end of the existing line.  With almost all versions	
iof the editor, it is not possible to backspace over an inserted	
ilinebreak, even while you are still in R insertion mode.  	
i	
iThe most important difference, though, is the handling of	
imetacharacters.  Yes, text insertion utilizes metacharacters too,	
iquite apart from the ones that the replacement patterns in	
i:substitute commands use.  The r command recognizes hardly any of	
ithese metacharacters, and quoting those in as literal characters is	
ivery simple.  The R command, though, recognizes almost all of them,	
iand quoting characters in with R is rather complicated.  	
i	
iQuoting in Characters	
i	
iThe phrase "quoting in" is standard terminology, but it is rather	
imisleading in the editor.  Unlike Unix shells, the editor does not	
iuse any of the ASCII quotation marks: ` ' " (backquote, single and	
idouble quote) to quote characters into a file.  Instead, it uses	
ithe backslash ("\") and control-V ("^V"); the latter is what	
iyou send when you press the V key while holding the CONTROL or CTRL	
ikey down.  In either case, you quote a character in by typing the	
iquoting character just prior to the character you want to quote in.	
iSo if @ is your line kill character, and you want to put that	
icharacter in the text you are typing in, you would have to type	
ieither \@ or ^V@ to get it there.  And if you want several	
iconsecutive characters quoted in, you must quote each of them	
iindividually.  That is, if you want to put @@@ into a line, you	
imust type either ^V@^V@^V@ or \@\@\@ to put that string there.  	
i	
iBut \ and ^V are not always interchangeable.  In many cases either	
iwill work; but sometimes you must choose the right one.  Which one	
ito use depends both on what character you want to quote in and	
iwhether you're using the r or R command.  	
i	
iOne obvious use for quoting is to insert a character that normally	
ierases part or all of what you've just typed in.  The ASCII	
ibackspace character, control-H, must be quoted in, and so must your	
iown line-kill character (@ in the example above) and your own erase	
icharacter if it is not control-H.  With the r command you quote in	
iany of these with a backslash; when using R you may quote any of	
ithese in using either backslash or control-V.  	
i	
iA pause here, to answer a question that might be in the minds of	
ipeople who know a little about Unix internals.  Ordinarily it is	
ithe asynchronous serial terminal line (or TTY) driver that	
irecognizes the erase and line-kill characters and edits the input	
iline accordingly without including these characters in the final	
iresult.  Then, how can one enter these same input-line characters	
iinto the edit buffer if they don't get past the TTY driver?	
iBecause Vi/Ex places the TTY driver into a special "raw" mode that	
iignores the line-editing characters passing them on to the editor.	
iOtherwise you would not be able to quote these characters in.	
iAlso, the editor is set up to discover your erase and line-kill	
icharacters by querying your personal environment, and then	
iinterpret these characters as the line driver would have. A nifty	
ifeature -- but unfortunately, the editor has no way to let the user	
iturn this feature off.  	
i	
iThe editor's creators came up with a curious method for repeating	
ishort text insertions, where the text to go in is always the same	
ibut any outgoing text varies.  They decided that when you are in	
iscreen mode, and have just gone into typing-in-text submode, and	
imake Control-@ ("^@") the first character you type in, then the	
ieditor should insert the last piece of text you had previously	
iinserted (if it was not more than 128 characters long) and take you	
iback to command mode. Unfortunately, they never made this work as	
ipromised.  	
i	
iIn actuality, ^@ operates anywhere in a text insertion, not just in	
ithe first character position.  What a ^@ does there depends on the	
isituation. If your last c d y command, or one of their variants	
isuch as s D etcetera, removed or copied a full line of text or	
iparts of two or more lines, or if you haven't run one of those	
icommands in your current editing session, then typing ^@ is just a	
inuisance.  It will take you out of text input submode and probably	
imove the cursor back a few characters from where the input ended.  	
i	
iBut if you have done at least one c d y command or a variant, and	
iif the very last one you did removed or copied only a part of a	
isingle line of text, then surprise!  Typing a ^@ in this case will	
ido three things: 	
i	
iUnless you typed it at the first character position on a line, it	
iwill move the cursor back one character.  This will move over the	
ilast character you typed in if you've typed any, or over one	
iexisting character if you type ^@ as the first character of your	
iinsertion, but will not erase the character it passes over.  	
i	
iJust to the left of the new cursor position, the editor will insert	
ithe text that was removed or copied by your last c d y command or	
ivariant.  (If you went into text-insertion submode via a c command	
ior a variant of it, the text you just took out is what will be put	
iback in.)  	
i	
iFinally, the text insertion will automatically end and you will be	
iback in command submode, with the cursor positioned at the start of	
ithe last simple word that was inserted by the ^@ metacharacter.  	
i	
iQuoting a ^@ into your text isn't possible, because the editor	
ireserves that character for internal use and will not accept it as	
iitself in any file you may edit.  Not that there would be any	
ireason to put ^@ in a file anyway: it is the ASCII character NUL, a	
ipadding character that is routinely inserted in data streams by	
idevice drivers, and just as routinely stripped at the receiving	
iend, so any ^@ characters you might add would be lost in the	
ishuffle.  But when you are using the R command, or any other	
icommand that lets you insert an indefinite amount of text, you can	
iquote a ^@ anyway by preceding it with a ^V.  The result will be to	
iquote ^[Pb into your file at that point; this being the command	
istring the editor issues to perform the odd operation I've detailed	
iabove.  	
i	
iThose of you who are skillful with the editor may wonder why the ^@	
iinsertion operates only when your last text extraction was a	
ifragment of one line.  After all, the P command by itself inserts	
ithe contents of the unnamed buffer, and that buffer holds whatever	
iwas extracted last, be it half a line or a hundred lines, doesn't	
iit? The answer lies in one of the editor's undocumented features.	
iWhen you give a command to insert text, even the r command that	
ionly inserts a single character, the editor simultaneously flushes	
ithe unnamed buffer and leaves it empty -- if and only if that	
ibuffer contained more than a fragment of one line.  So, when you	
ientered the text insertion mode from which ^@ operates, you emptied	
ithe unnamed buffer unless there was only a fragment of one line in	
iit.  	
i	
iAt times you may want to use the beautify option to the set	
icommand.  This tells the editor to throw away most, but not all,	
icontrol characters you may try to type in -- the exceptions usually	
iare the tab (^I), newline (^J), and form feed (^L) -- in order to	
ikeep you from inadvertently putting in invisible control characters	
ithat will be hard to detect later.  This option is normally off,	
ibut you can type :se bf to turn it on.  	
i	
iBut even when you want most control characters thrown out, there	
iwill be occasions when one must go in.  This is not possible using	
ia r command.  The usual r technique of backslashing will usually	
ibite back in this case -- the editor will interpret the control	
icharacter by acting on its control meaning rather than inserting it	
iin the text.  Using R, though, you can insert most control	
icharacters by preceding each with ^V.  	
i	
iEven this may not be enough.  Some systems are set up so that when	
icertain control characters are typed in, even though preceded by	
i^V, the system acts on them as control characters before the editor	
iever sees them.  To get around this problem, many implementations	
iof the editor, especially older ones, interpret an ordinary	
icharacter typed right after a ^V as a control character.  That is,	
ion these systems, typing ^VF or ^Vf while running an R command	
iinserts a ^F in the file, just as typing ^V^F would on systems that	
idon't have this challenge.  	
i	
iReaders Ask	
i	
iHere are the latest questions, and my solutions, from inquiring	
ireaders with problems you might face someday.	
i	
iTommy Spratlin writes:	
i	
iHi Walter, 	
i	
iIn moving files from Windows machines to UNIX, some of our users do	
ibinary transfers which result in ^M characters in the ASCII files.	
iUsually they occur at the ends of individual lines and I do: 	
i	
i  :1,$ s/^M//g	
i	
iwhere ^M is generated by ^V^M and everything works fine to delete	
ithese characters.  I now have a new problem: I found a file with ^M	
icharacters embedded in it, but the file is one long line.  I need	
ito replace them with Vi's line-end character to split this long	
iline into multiple lines.  But I can't because it's the same as	
ipressing the ENTER or RETURN key in the middle of the substitution	
icommand.  How can I replace the superfluous carriage return?  We	
ihave several files like this and it's causing problems viewing them	
iwith Web browsers.  	
i	
iI tried substituting a newline with the character code and the	
ioctal code unsuccessfully, and tried the ^M as a last unsuccessful	
iresort.	
i	
iThings aren't as complicated as you make them seem, Tommy.  First	
iof all, Web browsers generally ignore carriage-return and/or	
ilinefeed characters while formatting text for display.  If your	
ibrowser is choking on these all-one-line files, it is probably	
ibecause the lines are too long for your browser, or for some other	
icause not related to embedded ^M characters.  	
i	
iNow, as you have deduced, the difference between Microsoft and Unix	
itext file formats is that Microsoft operating systems seem to favor	
icarriage-return followed by linefeed (^J) as the line separator,	
iwhile Unix systems use linefeed alone.  	
i	
iAs you've discovered, you cannot directly quote a ^J into any	
ieditor command.  And yet, you put a ^J into your file every time	
iyou hit return during text entry, although the return key on most	
iterminals sends a ^M character.  That's the trick; the substitute	
icommand regards a ^M in the input pattern as a signal to insert a	
i^J and discard the ^M.  So you only need to get that ^M into the	
ireplacement pattern by typing in your command line like this: 	
i	
i  :1,$ s/^V^M/^V^M/g	
i	
iYou just have to overlook the appearance of futility in this	
icommand line, as though it were going to replace each ^M with	
iitself.  That first ^M is in the outgoing pattern, so it matches a	
ireal ^M. The second, in the replacement pattern, calls for a ^J as	
iI explained above.  	
i	
iHowever, these all-one-line files may be too long for the Vi	
ieditor, which cannot handle lines much more than a thousand	
icharacters long in most common implementations, with shorter limits	
iin older versions. The editor will truncate lines that exceed the	
ilimit, with only a minimal and rather cryptic warning.  In such	
icases, use the tr utility to replace the ^M characters (which is a	
ivery straightforward job with that tool), before you bring the file	
iinto the Vi editor.  	
i	
iYou may wonder then, how you would use the substitute command to	
iput ^M characters into your file.  The answer is to backslash the	
iquoted-in ^M. To add a ^M at the end of every line in your file, so	
ias to conform it to Microsoft practice, type this command: 	
i	
i  :%s/$/\^V^M	
i	
i(Note that it is important to type the \ first, then the ^V,	
ifollowed by the ^M.) The ^V puts the immediately-following ^M into	
ithe command line, and the backslash tells the command that this ^M	
iis to be considered a real one, not a metacharacter for ^J. In	
ifact, these are the general principles for quoting characters	
ialmost everywhere except in typing-in-text mode: 	
i	
iPrecede a character by ^V to keep that character from being	
iinterpreted as a metacharacter at the moment you type it.  In this case,	
iyou don't want typing ^M to immediately end the substitution command.	
i	
iPrecede a character by a backslash to keep that character from acting	
ias a metacharacter later, when what you've typed is interpreted by the	
ieditor -- for example, when what you have typed in is run as a command,	
ior interpreted as a search pattern.  This command uses a backslash to	
ikeep the command from inserting ^J instead of ^M at the time it executes.	
i	
iWhen you must use both, as in this case, type the backslash before	
iyou type the ^V. (If you think that this backslash would then	
iaffect the immediately following ^V rather than the later ^M,	
iremember that the ^V is not there when the backslash takes effect.	
iThe ^V disappears as soon as it tells the editor to insert the ^M	
iin the command instead of taking the ^M as the signal to end the	
icommand.)  	
i	
iFinally, you can replace linefeed characters with something else	
ivia line mode commands, but you must use two commands and only one	
iof them is the substitute command.  Suppose you need to change a	
ishort file's format from a number of lines to the format Tommy	
iencountered: a single line with ^M separators.  That is, replace	
ieach ^J (except the last) with a ^M. (This had better be a fairly	
ishort file, because even newer versions of the editor can't handle	
iany lines longer than 1024 characters.)  	
i	
iStart by using a command similar to the one above to put ^M at the	
iend of every line except the last.  (Since these ^M characters are	
ito separate lines, there's no use for one at the end of the last	
iline.) Then use this command: 	
i	
i  :%j!	
i	
ito join all the lines into one.  The "j" in this command line is	
ithe shortest abbreviation for the line mode join command, and the	
i"!" switch at the end of it tells the command not to insert blank	
ispace between the lines it joins.  	
i	
iThai-Nghia Dinh writes:	
i	
iHi,	
i	
iI have a question (rather simple, really) but no one seem able to	
iknow the answer.  Not even the help desk (with all the Vi gurus	
i:)). I'm hoping you can help me with it.  	
i	
iI have a text file of unknown length.  Each line of the file can be	
ivery short or very long (from 3 characters up to 1000 characters).  	
i	
iWithin this file, I'm trying to locate (search) the nth occurrence	
iof a word.  	
i	
iHere are a few things I've tried: 	
i	
i  The simple solution would be (from visual command mode): a	
i  /foobar command followed by the n command typed n-1 times.  But	
i  what if n is large, say 200 or greater?)  	
i	
i  :1,$ global /^/ /foobar/ (and its variations) Nothing useful...  	
i	
iCan you suggest a better way?  	
i	
iYes, although it involves a slightly tricky procedure.  Consider	
ithe following command string: 	
i	
i  :$|/\&lt;foobar\&gt;/s//QQQ	
i	
iThe first command in this string takes us to the last line of our	
ifile and -- incidentally -- displays it on our screen, which is not	
iimportant here.  The second command searches forward for a line	
icontaining "foobar" as a word, and starting from the last line the	
isearch must wrap around and find the first instance in the file.	
iThen that second command replaces the word "foobar" with "QQQ",	
ileaving the cursor at the point where the substitution was made.  	
i	
iNow let us make an addition to the start of this command string: 	
i	
i  :1,199g/^/$|/\&lt;foobar\&gt;/s//QQQ	
i	
iThis revised string repeats the procedure 199 times; each time the	
ifirst instance of "foobar" remaining in the file is the one	
ireplaced. So we end up sitting on the "QQQ" string that replaced	
ithe 199th instance of "foobar"; simply typing n will bring us to	
ithe 200th instance.  And if we move off that 200th instance for any	
ireason, going to the top of the file and searching for "foobar"	
iwill bring us right back to it, because the first 199 are now gone.  	
i	
iWhen we are finished with that 200th "foobar", this command: 	
i	
i  :%s/QQQ/foobar/g	
i	
iwill change those 199 "QQQ" strings back to "foobar".  Of course,	
iif there is any chance that "QQQ" might occur in the document as	
iitself, we can choose another dummy string.  	
i	
iAnd while I'm at it, I've got another question.  	
i	
iHow do I delete all lines beginning with a certain string, say,	
i!@#$ (or foobar for that matter). And a related question: how to	
idelete lines containing the word foobar (anywhere within the line)?  	
i	
iThe first command line following will solve your first problem, and	
ithe second will solve your second: 	
i	
i  :g/^foobar/d	
i  :g/\&lt;foobar\&gt;/d	
i	
iNext Time Around	
i	
iTo make room to answer two readers' questions, I had to skip	
ipresenting three great Vi tools -- autoindent, abbreviate, and map!	
i-- and the effect their metacharacters have in text-insertion mode.	
iThey'll be first up in the next part of this tutorial.  	
i	
iMore answers to reader questions are coming, too.  I have queries	
ito answer about the semicolon address separator and about yanking	
iwithin macros -- and if a few more significant problems arrive	
ihere, I'll try to fit them in, too.  	
i	
iAnd this time you won't have to wait and wait for the next tutorial	
ipart.  As I write this paragraph, I'm already in the middle of	
icreating the next part, so you should see it within a month after	
ithis part appears online.  	
i	
1Part 8: Indent, Like a Typewriter	/archive/vi/part8/	
1Back to the index	/archive/vi/	
