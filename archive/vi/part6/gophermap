iThe vi/ex Editor, Part 6: Addresses and Columns

i  Screen-Mode Addresses
i    A Few Address Principles
i    Useful Addresses
i  Editing in Columns
i    Single-Character Columns
i    Multi-Character Columns
i  Next Installment

iBy popular demand I'm trying something new in the tutorial,
istarting with this installment. The e-mail I receive from
itutorial readers most often asks me how to do some specific type
iof editing job, using whatever editor tools are needed.  So, I'm
inow mixing my general-principle explanations with in-depth
icoverage of particular work areas.

iThe first application area I'm covering is the one readers ask
iabout most often, by far: editing files where columns are a major
ifactor.  Future areas are up to you readers.  If you have an
iapplication area you'd like to see explained in some depth,
ie-mail me your suggestion.

iScreen-Mode Addresses

iYou use them all the time.  They're the address targets that tell
iscreen-mode commands like c d y which stretch of your file to act
ion.  And even more often you use such addresses without commands,
ito move around in the file.

iFor starters, I'll tell you some basics of screen-mode addressing
ithat aren't particularly clear to most editor users.  Then it's
ion to a few powerful but obscure addresses that most of us rarely
ior never use.

iA FEW ADDRESS PRINCIPLES

iThe first fact of screen-mode range addresses is simple enough:
ione end of the range to be affected by the command is always
imarked by the cursor itself.  The address you give the command
i(always a single address) indicates where the other end of the
iaffected range is to be. The address target can be either forward
ior backward from the cursor position, in most cases.  But exactly
ihow the cursor and the target terminate the two ends of the range
iis variable.

iAt the start we have to distinguish between line addresses and
icharacter addresses.  Line addresses are very straightforward:
ithe command affects the entire line the cursor is on, the entire
iline where the address point is located, and all the lines in
ibetween.  If you are using an address without a command, in order
ito move the cursor, a line address generally puts the cursor on
ithe first non-whitespace character in the line addressed.

iBut line versus character addresses affect a lot more than
iexactly what's included in the range.  As one example, if you
iyank or delete text using a line address and then place that text
isomewhere with a p or P command, that text will appear on a new
iline or lines, above or below the line you are on, respectively.
iBut if you yanked or deleted with a character address, when you
iput the text back in, it will appear within the line you are on,
ijust just ahead of or behind the cursor.  And to dispose of one
ieditor fallacy here and now, it does not make a bit of difference
ithat the range of text you yanked or deleted with a character
iaddress amounts to exactly one or more lines -- it will still
ibehave as any other text yanked or deleted with a character
iaddress.

iSo which addresses are line addresses?  That depends on what your
icommand is.

iBesides the three commands I cited as examples above, there are
ifour other, less-used commands -- ! &lt; &gt; = -- that also take
iaddresses.  The only thing you have to know right now about these
ifour commands is that they can act only on entire lines; that's
iinherent in what they do.  So with these four commands, every
iaddress is a line address.  (Except a handful of addresses, such
ias "f", that cannot be used with these commands at all.)

iWith the three more-used commands c d y or with an address used
iby itself to move the cursor, an individual address is either
ialways a line address or always a character address -- usually.
iThere are exceptions to this rule also, such as the address
i"j", which is a character address when you are just moving the
icursor, but a line address to any command.

iSo just where does a character address take you?  When you are
ijust moving around in the file, the cursor lands on the character
ithat is the target you sought.  Or if the target was a string of
icharacters, the character address puts the cursor on the first of
ithese.

iWhen you are using a character address with a command, the
isituation is more complex.  The one firm rule is that if the
icharacter address is farther down in the file than the cursor
iposition, the cursor position is included in the range the
icommand affects; while if the address target is earlier in the
ifile than the cursor, the cursor position is not included in the
irange.

iThe question of whether the address target is included in the
icommand's range, like all the other open questions raised in the
ilast few paragraphs, will have to be answered separately for each
iaddress. (But the usual rule is that if the address target is
iforward of the cursor, the target is not included; if the target
ilies backward from the cursor, the target is included.)

iNote also that a count given with any of these seven commands is
ipassed to the address.  You may give the count before or after
ithe command character itself, but always before the address.
iWhat the address does with the count, if anything, is also a
icase-by-case question.

iUSEFUL ADDRESSES 

iThere are four addresses  that together resemble a miniaturized,
ilocalized version of the / and ? search patterns. In each case,
ithe search takes place only in the current line, and only for a
isingle character.  To use any of them, you type one of the four
iletters designating the kind of inline search, immediately
ifollowed by the character to be searched for.  (There are no
imetacharacters used with these addresses.)

iThe letter "f" means that the search will go forward in the
icurrent line and stop on the character typed next.  "F" makes
ithe search run backward within the current line, otherwise the
isame as "f".  A "t" search is the same as an "f" search
iexcept that the search stops with the character just short of the
ione you type after the "t", and a "T" search is like a "t"
isearch but running backward within the current line.  Any of
ithese addresses can take a preceding count, which tells the
isearch not to stop at the first instance of the character sought,
ibut to go on to the nth, where n is the count.

iAny of these search commands,  including the repeat-search
icommands mentioned below, are character addresses and can be used
ias an address for any of the three range commands that does not
irequire a line address.  In every case, the character on which
ithe cursor would have landed had there been no command is the
ifurthest character included in the range the command will affect.

iA few examples.  "Fp" would cause a search that went backward and
ilanded on the closest prior letter "p".  "3f-" would make the
isearch run forward within the current line and stop on the third
iinstance of a hyphen.  "2T " would cause a backward search that
iended one character short of the second closest space character.

iThis search system has its own repeat-search characters, which
iuse storage buffers completely independent of those used for
istoring previous / and ? search strings.  A semicolon ";" repeats
ithe last inline search, in the same direction.  A comma ","
irepeats the last search but reverses the direction.  Any count to
ithe original search is not included in the repeat, but you can
igive a count to either repeat character which will be passed to
ithe search command that is repeated.  While a search is limited
ito the current line, you can run a search, move to another line,
ithen use a semicolon or comma to repeat the original search on
ithe new line.

iAnother very useful address  that operates within a single line
iis the vertical bar "|".  When preceded by a count, this address
itakes the cursor to the nth character on the current line, where
in is the count, regardless of where the cursor was when the
iaddress was given.  (In this address, n is absolute, not
irelative, starting from character one at the left edge of the
itext.)

iThis address can also be used with a command.  If the target
icharacter position is forward from the cursor position, the
ifurthest character affected will be the last one before the
itarget character.  If the target is backward from the cursor, the
itarget character as well as all those between it and the cursor
iwill be affected by the command.  

iEditing in Columns

iAlthough the Vi/Ex editor was not specifically designed to deal
iwith columnar material, there are ways to use it effectively for
ithis kind of work.  Your choice of techniques will depend on
iwhether you are dealing with single-character columns wherein
ieach character in a line is in a separate column, or
imulti-character columns where the columns are set apart from each
iother by a separator character.

iSINGLE-CHARACTER COLUMNS

iHere I'm using "columns" the way most programmers do.  A column
iin this sense is simply the characters in a vertical section of a
ifile, one character wide.  That is, the first character on each
iline of the file is in the first column, the second character of
ieach line is in the second column, and so on.  You'll find this
iusage in systems that use punch-card images, such as early
iFortran programs; in the blocked records in certain databases,
isuch as the ones used for very large mailing lists; etcetera.

iThe essential point is that the systems that use these records
iabsolutely depend on each piece of information being entirely
iwithin a certain column or range of columns, and nothing else
ibeing within those columns except padding characters to fill up
iany column positions not needed for the information in a
iparticular record.

iFor example, a mailing list may require that a suite or apartment
inumber be in columns 122 through 125 in each record (line), with
iany padding following the actual number, so that an address
iprinting program that finds "316&nbsp;" in those columns will
iprint ",&nbsp;#316" at the end of the street address line.  If it
ifinds "3A&nbsp;&nbsp;" it will then print ",&nbsp;#3A", etcetera.
iShould the suite number be even partially shifted out of the
idesignated columns, the system will either print garbage as the
isuite number or issue an error message and skip that address
ialtogether.  The principle is the same, and even more important,
iwith computer programs in punch-card image form.  

iWhen you are making changes in existing records, and editing
ivisually, the first important point is to be sure your are at the
istart of the particular field you need to modify.  The "|"
iaddress I've explained above takes care of that -- wherever you
iare in a line, typing 122| brings the cursor to the 122nd column.
iUnless there are not 122 columns in that line: then the cursor
iwill be placed in the last column that does exist, without any
iwarning or error message.  But files of this sort have generally
ibeen checked for exact block sizing, and if yours have not been,
iit's easy to check visually.

iTo check visually that all the lines in the file are of the
iproper length, start by running a :se list command, which will
idisplay a dollar sign at the end of each file line. Then scan
ithrough the file to check that all those dollar signs are aligned
ivertically.  If so, then check that the uniform line length is
ithe correct one -- if your line length should be 66 characters
i(not counting the nonvisible newline), then run a 65| command on
iany line, and make sure that the cursor lands one column away
ifrom the end of the line.

iWhen you are at the start of the field to be changed, you have a
ichoice of ways to change it.  If the change area is 12 characters
ilong, then typing 12cl followed by the 12 new characters and then
ithe escape key will do it.  But if you miss the count by even one
icharacter; if the actual number of characters you type in is 11
ior 13; then all the subsequent fields on that line will be
ishifted one character out of place, which is probably a recipe
ifor disaster.

iTo avoid this hazard, make use of the little-known R command.  It
istarts like the familiar r command, in that when you type the
iletter "R" in visual command mode the system waits to see what
icharacter you type next, and whatever that next character is, it
ireplaces the character that was under the cursor.  But instead of
ithen returning you to command mode, the R command then moves the
icursor one character to the right and again waits to see what
icharacter you type next -- the character you now type replaces
ithe character that is now under the cursor.  This process
icontinues until you stop it by hitting the escape key.  So if
iyour cursor is on the capital P in the following line:

i  but the greatest ancient Greek was Plato, who

iand you type in "RHomer" followed by the escape key, your line will
inow read:

i  but the greatest ancient Greek was Homer, who

iand the cursor will be on the letter r at the end of "Homer".
iThis character at a time replacement is the way to make sure you
idon't inadvertently shift any fields.  Just be certain that you
idon't keep typing replacement characters beyond the existing end
iof the line; you would extend the line length that way.  You can
igive a count to the R command, but you don't want to in this use
ibecause the count will multiply the number of times the new
icharacter string is inserted.  That is, in that example above
iabout replacing "Plato" with "Homer", if you had typed 3R instead
iof R your revised line would read:

i  but the greatest ancient Greek was HomerHomerHomer, who

iEntering completely new lines of information is another matter.
iYou should just type them straight across, as you would with any
itext entry, but if the existing lines are cryptic to human eyes
iyou may not be able to tell by looking just where one field ends
iand another begins. You can try to keep count of the characters,
iof course, but a single mistake will throw all the subsequent
ifields in that line out of position.

iWhat you need here is an on-screen template to show you what goes
iwhere.  You can make one on the spot, just by typing a template
iline into your file, entering each data line just above it, and
ideleting that template line when you are finished adding lines.
iFor example, suppose you are adding to a name file where each
irecord (line) starts with a month, day and year, continues with a
isource code (each of the preceding as a two-digit number, with a
ileading zero to pad it if necessary), and then has fields for a
ilast name, first name, and middle initial. It would not be
ipractical to judge where fields break just by looking at the
iexisting data lines, which might look like this: 

i  07215854von TarekenstuttLeopold  J
i  12077338Henderson-Blyth La Toya  P
i  10108972Thistlethwaites Geraldine

iBut a simple template line can clear it all up.  Here is one for the
ijob above: 

i  m|d|y|s|LLLLLLLLLLLLLLL|FFFFFFFF|M

iIt has mnemonic characters to remind you of what goes in each
ifield, and the "|" to indicate the last position of each field
imore noticeably. I've even used a lower-case letter for each
ifield that takes numeric characters right justified and zero
ipadded, and a capital letter for each field that takes alpha
icharacters left justified and space padded.  

iThe way to use this template is to start entering data lines
iimmediately above the template line.  That way, as you hit return
ito start a new line, that new line replaces the one you've just
ifinished in the position right above the template line.  Yes,
ieventually the template line will be driven down off the bottom
iof the screen, but returning to command mode and typing the
ilower-case letter "z" followed by the return key will move the
itemplate line and the lines around it to the top of the screen.

iBut there will be times when you don't want to spend time making
iindividual changes that you should be able to handle globally.
iSuppose an obsolescent operations code has been replaced, and you
inow need to change every "B27" to "K53" throughout your file, but
ionly when the "B27" appears in the operations code columns, which
iare columns 9 through 11. Th is odd-looking command will do it:

i  :%s/^\(........\)B27/\1K53

iThose eight consecutive dots in the search pattern guarantee that
ia match will occur only when there are exactly eight characters
ibetween the beginning of the line and the "B27".  So of
inecessity, the "B" must occur in column 9, and so on.  The "\1"
iputs those eight characters right back in again, so only the
i"B27" is actually replaced.

iIf your columnar file has all lines of equal length, as most do,
iyou can use this technique from the right side, too.  If all
ilines in the file have 66 characters, then typing that last
icommand as:

i  :%s/B27\(...\)$/K53\1

iwill accomplish the changes in a case where the operations code
icolumns are 61 through 63, without the need to type (and
icarefully count) sixty consecutive dots.

iBut there will be times when the columns to be changed are in the
imiddle of horrendously long record lines.  There are still a
icouple of tricks you may be able to use.  One is to find a
ilandmark somewhere in mid-line.  Does column 158 always contain
ieither a "*" or a "|" character, neither of which can appear
ianywhere else in the lines?  Then you can make the above change
iin columns 163 through 165 by typing:

i  :%s/\([*|]....\)B27/\1K53

iFailing a landmark, let the editor count out a long string of
idots for you.  To use this technique, you must first create your
isubstitution command as a text line within the file you are
iediting, next write that line as a separate file (and then delete
ithe command line from your original file), and finally use the
i:so command to pull in that one-line file and run it as a
iline-mode command. If you need a string of 92 consecutive dots in
iyour command, create a blank line at the end of your file, next
itype:

i  :1,92g/^/$s/^/.

ito put those 92 dots there, and finally put the rest of the
icommand around that dot string.

iMULTI-CHARACTER COLUMNS

iThe other meaning of "editing in columns" has to do with text
irather than data files.  It refers to tables of data such as you
imight find accompanying a technical article, columns of text
iand/or illustrations running in parallel as you'd find on a
inewspaper page, and the like.

iYes, Unix formatting utilities and some word processing programs
iwill format your final output into columns.  But you may not have
iall these utilities, you may not want to spend time trying to get
ithe results you want from those benighted programs, or you may
iplan to direct your output where formatters won't work.  

iVisually editing the columns of data in a table requires little
iexplanation.  The one thing to remember: use the R as far as
ipossible, to avoid shifting subsequent columns out of alignment
iinadvertently.  This holds for creating tables, too; start by
isetting up a rectangular block of space characters, then replace
ispaces with the column entries you want, to keep your next entry
ifrom misaligning previous ones.  This is also the best way to
icreate pictures, diagrams, graphs and maps using ASCII
icharacters.

iThings become problematic when you want to shift whole columns
iaround -- there are no built-in Vi facilities for doing this.
iHere is what it is practical to do in the editor.  As a real life
iexample, consider the piece below, which I use as the tail end of
iUsenet (Net news) posts that announce Indonesian classical music
iand dance performances at a local restaurant:

iIt's at the Dutch East Indies    ;,,,,;,,,,;,,,,;,,,,;
iRestaurant       on Oakland's   /%%%%%%%%%%%%%%%%%%%%%\
idowntown waterfront.  The      /%%%%%%%%%%%%%%%%%%%%%%%\
ifood    there is very good      "|""|"""|"""""|"""|""|"
iIndonesian cuisine at           _|__|___|_   _|___|__|_
ireasonable prices - dinners     =|==|===|=====|===|==|=
i$8.95 to $17.50.   Views are   ~~~~~~~~~~~( (~~~~~~~~~~~
ispectacular from the second                ) )
ifloor    picture windows, out
iover the water to Jack London Square, Alameda and San Francisco.
iFormality is medium - cloth napkins and oil    candles at the
itables, but no supercilious waiters, and the wall decorations are
imostly Indonesian handicrafts. The phone number for information
iand reservations is 510/444-6555.

i ( ( (             | Broadway ||I   The Dutch East Indies
i  ) ) )Jack London |==========||==  Restaurant is in Jack London
i ( ( ( Square      |E         ||8   Village, a boutiques &
i  ) ) )            |m         ||8   bistros cluster that is just
i ( ( ( JACK LONDON |b         ||0   down the estuary from Jack
i  ) ) )VILLAGE     |a         ||    London Square.  Jack London
i ( ( (        Alice|r Amtrak  ||f   Village is rustic,
i  ) ) ) -----------|c station ||r   picturesque, quiet and safe.
i ( ( (       Street|a         ||e   To get there from the
i  ) ) )            |d  Jackson||e   Interstate 880 freeway
i ( ( ( parking lot |e   ------||--  heading north, take the Oak
i  ) ) )            |r   Street||w   Street exit and turn left;
i ( ( (             |o         ||a   five blocks will bring you
i  ) ) )            |          ||y   to Embarca- dero on your
i ( ( (           -------------||--  right, just before Oak
i  ) ) )             Oak Street||    curves away to the left.

i(Going south on I-880, take the Jackson Street exit and go two
iblocks straight ahead before you turn right on Oak Street.)  Turn
iright onto Embarcadero and go three blocks, until you go under an
ioverpass of Victorian ironwork. Immediately turn left onto Alice
iStreet, where you will see Jack London Village on your right, and
ia large lot that offers validated parking on the left. Walk into
ithe Village's central courtyard, and you'll see the Dutch East
iIndies on the estuary side, toward the right, and upstairs.

iTo create this, I started by drawing the stylized building and
ithen the map.  In each case I created a large rectangular block
iof space characters, then began trying ideas with the R command
iuntil I had something that satisfied me.  (The pavilion sketch
ieventually became wider than I had planned, so I had to run a
i:%s/.*/   &   / command to give me more working space.)  Next I
iput additional blocks of space characters on the left of the
idrawing and the right of the map, to make a place for the text I
iwanted to include.  Then I started replacing spaces with text,
irewriting the text as I went along to fit it in nicely. When the
itext reached the bottom of the figure I was fitting it to, I went
ito full-width text lines, entering them the usual way.  A tedious
ilabor, but pretty straightforward.

iNow suppose I decided to redo this piece, by moving the picture
ito where the map is now, and vice versa.  A few well chosen
isubstitution and deletion commands would make copies of the two
ifigures minus the text, and I could just as easily copy the text
iwithout the two figures. But how would I recombine them?

iShort of typing the text in again from scratch, the best I could
ido is to yank the lines of each figure, one at a time, and put
ithem after (or before) the appropriate text lines, one at a time.
iNot that I would have to move back and forth between files with
ieach yank and put; I could yank up to 26 lines into the named
ibuffers, then move to the other file and put all 26 in their
iproper places.  But there is no Vi command to yank a rectangular
iblock of characters.

iAlso take note that I should yank using addresses that are not
iline addresses, even though I will be yanking whole lines.  If I
ishould yank with line addresses, putting the pieces into the
iother file must make those pieces separate lines -- then I would
ihave to join each pair of lines to create the columns I want.

iNext Time Around

iIn the next part of this tutorial, I will go over host of
icomplications and opportunities that come from allowing the
ireplacement commands I've discussed to use metacharacters. Then
iI'll answer a couple of questions from readers that should be of
iuse to quite a few of you from time to time.

1Part 7: The Replacement Commands	/archive/vi/part7/
1Back to the index	/archive/vi/
